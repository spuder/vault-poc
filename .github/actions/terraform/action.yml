---
name: 'Foobar'
description: 'Foobar'
inputs:
  environment:
    description: 'The environment to run the terraform plan and apply against'
    required: true
    default: 'sandbox'
  approver_required:
    description: 'If true, then the terraform plan will require approval before running terraform apply'
    required: false
    default: 'false'

runs:
  using: "composite"
  steps:
    - name: ls
      run: ls -la
      shell: bash
      working-directory: ${{ inputs.environment }}/vault
    - name: terraform init
      run: terraform init -no-color
      shell: bash
      working-directory: ${{ inputs.environment }}/vault
    - name: terraform plan
      id: tf_plan
      run: terraform plan -no-color -out=terraform.plan
      shell: bash
      working-directory: ${{ inputs.environment }}/vault
      continue-on-error: true

    - uses: actions/github-script@v6
      # if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
      shell: bash
    - name: Terraform Plan Status
      if: steps.tf_plan.outcome == 'failure'
      run: exit 1
      shell: bash
          
    # - name: approve
    #   if: ${{ github.event.inputs.approver_required == 'true' }}
    #   uses: actions/request-approval@v2
    #   with:
    #     reviewers: octocat #TODO: change to some other approver
    - name: deploy
      run: echo "deploying to ${{ inputs.environment }}"
      shell: bash
      working-directory: ${{ inputs.environment }}/vault
